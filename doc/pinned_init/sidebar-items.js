initSidebarItems({"attr":[["manual_init","Use this attribute on a struct with named fields to ensure safer pinned initialization of all the fields marked with `#[init]`."],["pinned_init","Use this attribute on a struct with named fields to ensure safe pinned initialization of all the fields marked with `#[init]`."]],"mod":[["needs_init","Custom pointer types used to ensure that initialization was done completly. The pointer types provided by this module [`NeedsPinnedInit<'init, T>`] and [`NeedsInit<'init, T>`] will"],["ptr","Module providing a special pointer trait used to transfer owned data and to allow safe transmuation of data without forgetting to change other pointer types."],["static_uninit","Using [`MaybeUninit<T>`] requires unsafe, but this is often not necessary. This module provides [`StaticUninit<T, INIT>`] a safer alternative using static type checking to ensure one cannot use an uninitialized value as an initialized and to prevent leaking values when initializing a value twice without dropping the contents."],["transmute","Initializing a value in place (because it is pinned) requires a transmuation. Because transmuations are inherently unsafe, this module aims to create a safer abstraction and requires users to explicitly opt in to use this initialization."]],"trait":[["PinnedInit","Facilitates pinned initialization. Before you implement this trait manually, look at the [`pinned_init`] proc macro attribute, it can be used to implement this trait in a safe and sound fashion in many cases."],["SafePinnedInit","Sealed trait to facilitate safe initialization of the types supported by this crate."]]});